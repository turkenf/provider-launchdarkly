/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientSideAvailabilityObservation struct {

	// Whether this flag is available to SDKs using the client-side ID.
	UsingEnvironmentID *bool `json:"usingEnvironmentId,omitempty" tf:"using_environment_id,omitempty"`

	// Whether this flag is available to SDKs using a mobile key.
	UsingMobileKey *bool `json:"usingMobileKey,omitempty" tf:"using_mobile_key,omitempty"`
}

type ClientSideAvailabilityParameters struct {

	// Whether this flag is available to SDKs using the client-side ID.
	// +kubebuilder:validation:Optional
	UsingEnvironmentID *bool `json:"usingEnvironmentId,omitempty" tf:"using_environment_id,omitempty"`

	// Whether this flag is available to SDKs using a mobile key.
	// +kubebuilder:validation:Optional
	UsingMobileKey *bool `json:"usingMobileKey,omitempty" tf:"using_mobile_key,omitempty"`
}

type CustomPropertiesObservation struct {

	// The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The human-readable name of the feature flag.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The variation value. The value's type must correspond to the variation_type argument. For example: variation_type = "boolean" accepts only true or false. The "number" variation type accepts both floats and ints, but please note that any trailing zeroes on floats will be trimmed (i.e. 1.1 and 1.100 will both be converted to 1.1).
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomPropertiesParameters struct {

	// The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// The human-readable name of the feature flag.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The variation value. The value's type must correspond to the variation_type argument. For example: variation_type = "boolean" accepts only true or false. The "number" variation type accepts both floats and ints, but please note that any trailing zeroes on floats will be trimmed (i.e. 1.1 and 1.100 will both be converted to 1.1).
	// +kubebuilder:validation:Required
	Value []*string `json:"value" tf:"value,omitempty"`
}

type DefaultsObservation struct {

	// The index of the variation the flag will default to in all new environments when off.
	// The index of the variation served when the flag is off for new environments
	OffVariation *float64 `json:"offVariation,omitempty" tf:"off_variation,omitempty"`

	// The index of the variation the flag will default to in all new environments when on.
	// The index of the variation served when the flag is on for new environments
	OnVariation *float64 `json:"onVariation,omitempty" tf:"on_variation,omitempty"`
}

type DefaultsParameters struct {

	// The index of the variation the flag will default to in all new environments when off.
	// The index of the variation served when the flag is off for new environments
	// +kubebuilder:validation:Required
	OffVariation *float64 `json:"offVariation" tf:"off_variation,omitempty"`

	// The index of the variation the flag will default to in all new environments when on.
	// The index of the variation served when the flag is on for new environments
	// +kubebuilder:validation:Required
	OnVariation *float64 `json:"onVariation" tf:"on_variation,omitempty"`
}

type FlagObservation struct {

	// Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
	// Whether to archive the flag
	Archived *bool `json:"archived,omitempty" tf:"archived,omitempty"`

	// A block describing whether this flag should be made available to the client-side JavaScript SDK using the client-side Id, mobile key, or both. This value gets its default from your project configuration if not set. Once set, if removed, it will retain its last set value. To learn more, read Nested Client-Side Availability Block.
	ClientSideAvailability []ClientSideAvailabilityObservation `json:"clientSideAvailability,omitempty" tf:"client_side_availability,omitempty"`

	// List of nested blocks describing the feature flag's custom properties. To learn more, read Nested Custom Properties.
	CustomProperties []CustomPropertiesObservation `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed. To learn more, read Nested Defaults Blocks.
	// The default variations used for this flag in new environments. If omitted, the first and last variation will be used
	Defaults []DefaultsObservation `json:"defaults,omitempty" tf:"defaults,omitempty"`

	// The feature flag's description.
	// A short description of what the flag will be used for
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The unique feature flag ID in the format project_key/flag_key.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Deprecated  Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. include_in_snippet is now deprecated. Please migrate to client_side_availability.using_environment_id to maintain future compatability.
	// Whether or not this flag should be made available to the client-side JavaScript SDK
	IncludeInSnippet *bool `json:"includeInSnippet,omitempty" tf:"include_in_snippet,omitempty"`

	// The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// A unique key that will be used to reference the flag in your code
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The feature flag maintainer's 24 character alphanumeric team member ID.
	// The LaunchDarkly id of the user who will maintain the flag
	MaintainerID *string `json:"maintainerId,omitempty" tf:"maintainer_id,omitempty"`

	// The human-readable name of the feature flag.
	// A human-friendly name for the feature flag
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The LaunchDarkly project key
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// Set of feature flag tags.
	// Tags associated with your resource
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies whether the flag is a temporary flag.
	// Whether or not the flag is a temporary flag
	Temporary *bool `json:"temporary,omitempty" tf:"temporary,omitempty"`

	// The feature flag's variation type: boolean, string, number or json.
	// The uniform type for all variations. Can be either "boolean", "string", "number", or "json".
	VariationType *string `json:"variationType,omitempty" tf:"variation_type,omitempty"`

	// List of nested blocks describing the variations associated with the feature flag. You must specify at least two variations. To learn more, read Nested Variations Blocks.
	// An array of possible variations for the flag
	Variations []VariationsObservation `json:"variations,omitempty" tf:"variations,omitempty"`
}

type FlagParameters struct {

	// Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
	// Whether to archive the flag
	// +kubebuilder:validation:Optional
	Archived *bool `json:"archived,omitempty" tf:"archived,omitempty"`

	// A block describing whether this flag should be made available to the client-side JavaScript SDK using the client-side Id, mobile key, or both. This value gets its default from your project configuration if not set. Once set, if removed, it will retain its last set value. To learn more, read Nested Client-Side Availability Block.
	// +kubebuilder:validation:Optional
	ClientSideAvailability []ClientSideAvailabilityParameters `json:"clientSideAvailability,omitempty" tf:"client_side_availability,omitempty"`

	// List of nested blocks describing the feature flag's custom properties. To learn more, read Nested Custom Properties.
	// +kubebuilder:validation:Optional
	CustomProperties []CustomPropertiesParameters `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed. To learn more, read Nested Defaults Blocks.
	// The default variations used for this flag in new environments. If omitted, the first and last variation will be used
	// +kubebuilder:validation:Optional
	Defaults []DefaultsParameters `json:"defaults,omitempty" tf:"defaults,omitempty"`

	// The feature flag's description.
	// A short description of what the flag will be used for
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Deprecated  Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. include_in_snippet is now deprecated. Please migrate to client_side_availability.using_environment_id to maintain future compatability.
	// Whether or not this flag should be made available to the client-side JavaScript SDK
	// +kubebuilder:validation:Optional
	IncludeInSnippet *bool `json:"includeInSnippet,omitempty" tf:"include_in_snippet,omitempty"`

	// The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// A unique key that will be used to reference the flag in your code
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The feature flag maintainer's 24 character alphanumeric team member ID.
	// The LaunchDarkly id of the user who will maintain the flag
	// +kubebuilder:validation:Optional
	MaintainerID *string `json:"maintainerId,omitempty" tf:"maintainer_id,omitempty"`

	// The human-readable name of the feature flag.
	// A human-friendly name for the feature flag
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The LaunchDarkly project key
	// +kubebuilder:validation:Optional
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// Set of feature flag tags.
	// Tags associated with your resource
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies whether the flag is a temporary flag.
	// Whether or not the flag is a temporary flag
	// +kubebuilder:validation:Optional
	Temporary *bool `json:"temporary,omitempty" tf:"temporary,omitempty"`

	// The feature flag's variation type: boolean, string, number or json.
	// The uniform type for all variations. Can be either "boolean", "string", "number", or "json".
	// +kubebuilder:validation:Optional
	VariationType *string `json:"variationType,omitempty" tf:"variation_type,omitempty"`

	// List of nested blocks describing the variations associated with the feature flag. You must specify at least two variations. To learn more, read Nested Variations Blocks.
	// An array of possible variations for the flag
	// +kubebuilder:validation:Optional
	Variations []VariationsParameters `json:"variations,omitempty" tf:"variations,omitempty"`
}

type VariationsObservation struct {

	// The feature flag's description.
	// A description for the variation
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The human-readable name of the feature flag.
	// A name for the variation
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The variation value. The value's type must correspond to the variation_type argument. For example: variation_type = "boolean" accepts only true or false. The "number" variation type accepts both floats and ints, but please note that any trailing zeroes on floats will be trimmed (i.e. 1.1 and 1.100 will both be converted to 1.1).
	// The value of the flag for this variation
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type VariationsParameters struct {

	// The feature flag's description.
	// A description for the variation
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The human-readable name of the feature flag.
	// A name for the variation
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The variation value. The value's type must correspond to the variation_type argument. For example: variation_type = "boolean" accepts only true or false. The "number" variation type accepts both floats and ints, but please note that any trailing zeroes on floats will be trimmed (i.e. 1.1 and 1.100 will both be converted to 1.1).
	// The value of the flag for this variation
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// FlagSpec defines the desired state of Flag
type FlagSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FlagParameters `json:"forProvider"`
}

// FlagStatus defines the observed state of Flag.
type FlagStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FlagObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Flag is the Schema for the Flags API. Create and manage LaunchDarkly feature flags.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,launchdarkly}
type Flag struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.key)",message="key is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.projectKey)",message="projectKey is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.variationType)",message="variationType is a required parameter"
	Spec   FlagSpec   `json:"spec"`
	Status FlagStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FlagList contains a list of Flags
type FlagList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Flag `json:"items"`
}

// Repository type metadata.
var (
	Flag_Kind             = "Flag"
	Flag_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Flag_Kind}.String()
	Flag_KindAPIVersion   = Flag_Kind + "." + CRDGroupVersion.String()
	Flag_GroupVersionKind = CRDGroupVersion.WithKind(Flag_Kind)
)

func init() {
	SchemeBuilder.Register(&Flag{}, &FlagList{})
}
